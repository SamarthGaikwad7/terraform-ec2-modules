pipeline {
    parameters {
        booleanParam(name: 'autoApprove', defaultValue: false, description: 'Automatically apply Terraform changes?')
        booleanParam(name: 'destroyInfra', defaultValue: false, description: 'Destroy AWS infrastructure?')
    }

    agent any

    environment {
        TERRAFORM_DIR = "terraform-ec2-modules"
    }

    stages {
        stage('Checkout') {
            steps {
                script {
                    dir(TERRAFORM_DIR) {
                        git branch: 'main', credentialsId: 'e7377807-2072-469b-9841-8da309ddd290', url: 'https://github.com/SamarthGaikwad7/terraform-ec2-modules.git'
                    }
                }
            }
        }

        stage('Plan') {
            steps {
                withCredentials([
                    [$class: 'AmazonWebServicesCredentialsBinding',
                     credentialsId: 'aws-credentials',
                     accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                     secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']
                ]) {
                    sh '''
                        cd ${TERRAFORM_DIR}
                        terraform init
                        terraform plan -out=tfplan
                        terraform show -no-color tfplan > tfplan.txt
                    '''
                }
            }
        }

        stage('Approval') {
            when {
                not { equals expected: true, actual: params.autoApprove }
            }
            steps {
                script {
                    def plan = readFile("${TERRAFORM_DIR}/tfplan.txt")
                    input message: "Do you want to apply the plan?",
                          parameters: [text(name: 'Plan', description: 'Please review the Terraform plan', defaultValue: plan)]
                }
            }
        }

        stage('Apply') {
            when {
                anyOf {
                    equals expected: true, actual: params.autoApprove
                    triggeredBy 'UserIdCause'
                }
            }
            steps {
                withCredentials([
                    [$class: 'AmazonWebServicesCredentialsBinding',
                     credentialsId: 'aws-credentials',
                     accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                     secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']
                ]) {
                    sh '''
                        cd ${TERRAFORM_DIR}
                        terraform apply -auto-approve
                    '''
                }
            }
        }

        stage('Destroy') {
            when {
                equals expected: true, actual: params.destroyInfra
            }
            steps {
                input message: "Are you sure you want to destroy the infrastructure?", ok: "Yes, Destroy"
                withCredentials([
                    [$class: 'AmazonWebServicesCredentialsBinding',
                     credentialsId: 'aws-credentials',
                     accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                     secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']
                ]) {
                    sh '''
                        cd ${TERRAFORM_DIR}
                        terraform destroy -auto-approve
                    '''
                }
            }
        }
    }
}
